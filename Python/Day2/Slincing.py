#Dada la palabra "murci√©lago", imprime la letra en la posici√≥n 6.
#Extrae los primeros 4 caracteres de "murci√©lago".
#Extrae la √∫ltima letra usando √≠ndice negativo.
#Imprime la palabra "murci√©lago" al rev√©s.
#Extrae los caracteres del √≠ndice 2 al 6 (sin incluir el 6).
# m-0
# u-1
# r-2
# c-3
# i-4
# e-5
# l-6
# a-7
# g-8
# o-9
"""
palabra = "murcielago"
print(palabra[6])
print(palabra[0:4])
print(palabra[-1])
print(palabra[::-1])
print(palabra[2:6])
"""

#Extrae los primeros 6 caracteres de "murci√©lago" saltando de 2 en 2.
#Extrae todos los caracteres en posiciones pares (√≠ndices 0, 2, 4...) de "murci√©lago".
#Extrae todos los caracteres en posiciones impares.
#Imprime la palabra desde el √≠ndice 7 hasta el 2 en orden inverso.
#¬øQu√© imprime "murci√©lago"[::3]?
"""""
palabra = "murcielago"
print(palabra[0:6:2])
print(palabra[0::2])
print(palabra[0::0+1])
print(palabra[-7:-2])
print(palabra[7:2:-1])
#mclo
"""
"""
Extrae la subcadena "ci√©l" desde "murci√©lago" usando slicing.
Invierte la palabra y luego extrae los primeros 5 caracteres del resultado.
Extrae una subcadena que diga "g√≥le" desde "murci√©lago" usando slicing y pasos negativos.
Construye la palabra "mago" usando solo slicing sobre "murci√©lago".
Elimina la primera y la √∫ltima letra de "murci√©lago" usando slicing.
"""
palabra = "murcielago"
print(palabra[3:7])
print(palabra[-1:-10])

# ===============================
# Nivel Avanzado - Slicing en Python
# Palabra base: "murci√©lago"
# ===============================

palabra = "murci√©lago"
# √çndices:      0123456789
# Letras:       m u r c i √© l a g o

# 1Ô∏è‚É£ Extraer la subcadena "ci√©l"
# Tomamos desde el √≠ndice 3 ('c') hasta el √≠ndice 6 ('l'), sin incluir el 7
print("1. Subcadena 'ci√©l':", palabra[3:7])  # Resultado: 'ci√©l'

# 2Ô∏è‚É£ Invertir la palabra y extraer los primeros 5 caracteres
# Invertimos la palabra con [::-1] y luego tomamos los primeros 5 con [:5]
print("2. Primeros 5 caracteres invertidos:", palabra[::-1][:5])  # Resultado: 'ogale'

# 3Ô∏è‚É£ Extraer una subcadena que diga "g√≥le" usando slicing y pasos negativos
# Del √≠ndice 8 ('g') al √≠ndice 5 ('√©') en orden inverso: [8:4:-1]
print("3. Subcadena invertida (g√≥le al rev√©s):", palabra[8:4:-1])  # Resultado: 'g√≥l√©'
# Si se desea en orden "normal", se puede invertir el resultado:
print("3b. 'g√≥le' en orden directo (si existiera):", palabra[8:4:-1][::-1])  # Resultado: '√©l√≥g'

# 4Ô∏è‚É£ Construir la palabra "mago" usando slicing
# Tomamos letras espec√≠ficas: 'm' (0), 'a' (7), 'g' (8), 'o' (9)
print("4. Construir 'mago':", palabra[0] + palabra[7] + palabra[8] + palabra[9])  # Resultado: 'mago'

# 5Ô∏è‚É£ Eliminar la primera y la √∫ltima letra
# Saltamos la primera (√≠ndice 0) y la √∫ltima (√≠ndice -1) usando [1:-1]
print("5. Sin primera ni √∫ltima letra:", palabra[1:-1])  # Resultado: 'urci√©lag'


# ===============================
# Nivel Intermedio - Slicing en Python
# Palabra base: "murci√©lago"
# ===============================

palabra = "murci√©lago"
# √çndices:      0123456789
# Letras:       m u r c i √© l a g o

# 6Ô∏è‚É£ Extraer los primeros 6 caracteres saltando de 2 en 2
# Tomamos del √≠ndice 0 al 5, con paso de 2 ‚Üí √≠ndices 0, 2, 4
print("6. Primeros 6 caracteres con paso 2:", palabra[0:6:2])  # Resultado: 'mri'

# 7Ô∏è‚É£ Extraer todos los caracteres en posiciones pares (√≠ndices 0, 2, 4, ...)
# Paso de 2 desde el inicio
print("7. Caracteres en posiciones pares:", palabra[0::2])  # Resultado: 'mrilg'

# 8Ô∏è‚É£ Extraer todos los caracteres en posiciones impares (√≠ndices 1, 3, 5, ...)
# Paso de 2 comenzando desde el √≠ndice 1
print("8. Caracteres en posiciones impares:", palabra[1::2])  # Resultado: 'uceao'

# 9Ô∏è‚É£ Imprimir la palabra desde el √≠ndice 7 hasta el 2 en orden inverso
# De √≠ndice 7 ('a') hacia √≠ndice 3 ('c') en reversa: 7,6,5,4,3
print("9. De √≠ndice 7 a 2 en reversa:", palabra[7:2:-1])  # Resultado: 'aleic'

# üîü ¬øQu√© imprime palabra[::3]?
# Paso de 3 desde el inicio: √≠ndices 0, 3, 6, 9 ‚Üí 'm', 'c', 'l', 'o'
print("10. palabra[::3] da:", palabra[::3])  # Resultado: 'mclo'
